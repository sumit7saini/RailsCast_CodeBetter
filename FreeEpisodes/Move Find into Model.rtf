{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 We have a Task model and we want to perform find on that.\
Class TaskController < ApplicationController\
 Def index\
  @tasks = Task.find_all_by_complete(:false, :order_by => \'93created_at DESC)\
 end\
End\
\
If this same find is used several times so make it a function and place it in it\'92s model. We can put it in controller too but in model it would be accessible to associated controller as well which is definitely better dry pattern.\
\
Class Task < ActiveRecord::Base\
  belongs_to :project\
\
 Def self.find_incomplete\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0   find_all_by_complete(:false, :order_by => \'93created_at DESC)\
 End\
End\
\
There\'92s no need to specify Task in the find line as the find is already scoped inside Task class. Now You can call Task.find_incomplete whenever you need to perform that find. This will even work in associations so that you can find Project\'92s incomplete tasks like this.\
\
Class ProjectsController < ApplicationController\
 Def show\
  @project = Project.find(params[:id])\
  @tasks = @project.tasks.find_incomplete\
 End\
End\
\
}