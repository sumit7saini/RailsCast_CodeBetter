{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9600\viewh10580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Here is a Task model that has class method that returns all of the incomplete tasks.\
\
Class Task < ActiveRecord::Base\
 belongs_to :project\
 \
 Def self.find_incomplete\
  Find_all_by_complete( false, :order => \'91created_at DESC\'92 )\
 End\
End\
\
This method is used in the TasksController.\
\
Class TasksController < ApplicationController\
 Def index\
  @tasks = Task . find_incomplete\
 End\
\
This is limiting as we can\'92t add further conditions to our custom find method, What if we want to achieve something this.\
 @tasks=Task.find_incomplete  :limit => 20\
\
One elegant way to achieve this is with_scope\
\
Class Task < ActiveRecord::Base\
 belongs_to\
\
 Def self.find_incomplete( options = \{\} )\
  with_scope :find => options do\
   find_all_by_complete( false, :order => \'91created_at DESC\'92 )\
   End\
  End\
End\
}